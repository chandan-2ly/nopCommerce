@model CatalogProductsDisplayingModel

@*todo: inject 'enable ajax setting'*@

<div class="product-selectors">
    @*view mode*@
    @if (Model.AllowProductViewModeChanging)
    {
        <div class="product-viewmode">
            <span>@T("Catalog.ViewMode")</span>
            @if (Model.AvailableViewModes.Count > 1)
            {
                var gridMode = Model.AvailableViewModes[0];
                var listMode = Model.AvailableViewModes[1];

                <a class="viewmode-icon grid @if (gridMode.Selected){<text>selected</text>}" data-viewmode="@gridMode.Value" href="@gridMode.URL" title="@gridMode.Name">@gridMode.Name</a>
                <a class="viewmode-icon list @if (listMode.Selected){<text>selected</text>}" data-viewmode="@listMode.Value" href="@listMode.URL" title="@listMode.Name">@listMode.Name</a>
            }
        </div>
    }
    @*sorting*@
    @if (Model.AllowProductSorting)
    {
        <div class="product-sorting">
            <span>@T("Catalog.OrderBy")</span>
            <select id="products-orderby" aria-label="@T("Catalog.OrderBy.Label")" onchange="setLocation(this.value);">
                @foreach (var option in Model.AvailableSortOptions)
                {
                    <option data-order="@option.Value" value="@option.URL">@option.Name</option>
                }
            </select>
        </div>
    }
    @*page size*@
    @if (Model.AllowCustomersToSelectPageSize)
    {
        <div class="product-page-size">
            <span>@T("Catalog.PageSize")</span>
            <select id="products-pagesize" aria-label="@T("Catalog.PageSize.Label")" onchange="setLocation(this.value);">
                @foreach (var option in Model.PageSizeOptions)
                {
                    <option data-pagesize="@option.Value" value="@option.URL">@option.Name</option>
                }
            </select>
            <span>@T("Catalog.PageSize.PerPage")</span>
        </div>
    }
</div>